
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[codz]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py.cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock
#poetry.toml

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.envrc
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
.idea/

# Abstra
# Abstra is an AI-powered process automation framework.
# Ignore directories containing user credentials, local state, and settings.
# Learn more at https://abstra.io/docs
.abstra/

# Visual Studio Code
#  Visual Studio Code specific template is maintained in a separate VisualStudioCode.gitignore
#  that can be found at https://github.com/github/gitignore/blob/main/Global/VisualStudioCode.gitignore
#  and can be added to the global gitignore or merged into this file. However, if you prefer,
#  you could uncomment the following to ignore the entire vscode folder
# .vscode/

# Ruff stuff:
.ruff_cache/

# PyPI configuration file
.pypirc

# Cursor
#  Cursor is an AI-powered code editor. `.cursorignore` specifies files/directories to
#  exclude from AI features like autocomplete and code analysis. Recommended for sensitive data
#  refer to https://docs.cursor.com/context/ignore-files
.cursorignore
.cursorindexingignore

# Marimo
marimo/_static/
marimo/_lsp/
__marimo__/


/releases/4k_id.json
/releases/anime_id.json
/releases/cartoons_id.json
/releases/cartoons_tv_id.json
/releases/lampac_all_cartoon_movies.json
/releases/lampac_all_cartoon_series.json
/releases/lampac_all_tv_shows.json
/releases/lampac_all_tv_shows_ru.json
/releases/lampac_cartoon_movies.json
/releases/lampac_cartoon_movies_new.json
/releases/lampac_cartoon_series.json
/releases/lampac_cartoon_series_new.json
/releases/lampac_movies.json
/releases/lampac_movies_4k.json
/releases/lampac_movies_4k_new.json
/releases/lampac_movies_new.json
/releases/lampac_movies_ru.json
/releases/lampac_movies_ru_new.json
/releases/lampac_tv.json
/releases/lampac_tv_new.json
/releases/lampac_tv_ru.json
/releases/lampac_tv_ru_new.json
/releases/legends_id.json
/releases/movies_id.json
/releases/movies_id_1980.json
/releases/movies_id_1981.json
/releases/movies_id_1982.json
/releases/movies_id_1983.json
/releases/movies_id_1984.json
/releases/movies_id_1985.json
/releases/movies_id_1986.json
/releases/movies_id_1987.json
/releases/movies_id_1988.json
/releases/movies_id_1989.json
/releases/movies_id_1990.json
/releases/movies_id_1991.json
/releases/movies_id_1992.json
/releases/movies_id_1993.json
/releases/movies_id_1994.json
/releases/movies_id_1995.json
/releases/movies_id_1996.json
/releases/movies_id_1997.json
/releases/movies_id_1998.json
/releases/movies_id_1999.json
/releases/movies_id_2000.json
/releases/movies_id_2001.json
/releases/movies_id_2002.json
/releases/movies_id_2003.json
/releases/movies_id_2004.json
/releases/movies_id_2005.json
/releases/movies_id_2006.json
/releases/movies_id_2007.json
/releases/movies_id_2008.json
/releases/movies_id_2009.json
/releases/movies_id_2010.json
/releases/movies_id_2011.json
/releases/movies_id_2012.json
/releases/movies_id_2013.json
/releases/movies_id_2014.json
/releases/movies_id_2015.json
/releases/movies_id_2016.json
/releases/movies_id_2017.json
/releases/movies_id_2018.json
/releases/movies_id_2019.json
/releases/movies_id_2020.json
/releases/movies_id_2021.json
/releases/movies_id_2022.json
/releases/movies_id_2023.json
/releases/movies_id_2024.json
/releases/movies_id_2025.json
/releases/tv_id.json
